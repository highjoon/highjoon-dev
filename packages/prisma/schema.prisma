generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Post {
  id             String          @id @default(cuid())
  slug           String          @unique
  title          String
  description    String
  contentUrl     String
  bannerImageUrl String
  publishedAt    DateTime        @db.Timestamptz(6)
  category       String?
  createdAt      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?       @updatedAt @db.Timestamptz(6)
  viewCount      Int?            @default(0)
  likeCount      Int?            @default(0)
  isFeatured     Boolean         @default(false)
  PostLike       PostLike[]
  viewLogs       PostViewLog[]
  viewStats      PostViewStats[]

  @@index([publishedAt])
}

model PostViewStats {
  id        String   @id @default(cuid())
  postId    String
  date      DateTime @db.Date
  viewCount Int      @default(0)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, date])
}

model PostViewLog {
  id        String   @id @default(cuid())
  postId    String
  ip        String
  date      DateTime @db.Date
  expiredAt DateTime @db.Timestamptz(6)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, ip, date])
}

model User {
  id        String     @id @default(cuid())
  name      String
  avatarUrl String
  homeUrl   String
  role      Role       @default(USER)
  PostLike  PostLike[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

enum Role {
  USER
  ADMIN
}
